<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoxin.blog.web.admin.mapper.ArticleMapper">
    <update id="restoreArticle">
        update article set deleted = 0 where id = #{id}
    </update>
    <resultMap id="PopularArticleResultMap" type="com.xiaoxin.blog.web.admin.vo.PopularArticleVo">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="coverImage" column="coverImage"/>
        <result property="viewCount" column="viewCount"/>
        <result property="likeCount" column="likeCount"/>
        <result property="commentCount" column="commentCount"/>
        <result property="tagCount" column="tagCount"/>
        <result property="createTime" column="createTime"/>
        <result property="categoryName" column="categoryName"/>

        <!-- 自定义tagNames映射 -->
        <result property="tagNames" column="tagNames"
                typeHandler="com.xiaoxin.blog.web.admin.handler.StringToListTypeHandler"/>

        <!-- 嵌套对象映射 -->
        <association property="author" javaType="com.xiaoxin.blog.web.admin.vo.PopularArticleVo$AuthorVo">
            <result property="id" column="author.id"/>
            <result property="username" column="author.username"/>
            <result property="avatar" column="author.avatar"/>
        </association>
    </resultMap>
    <select id="getPopularArticles" resultMap="PopularArticleResultMap">
        SELECT
        a.id,
        a.title,
        a.cover_image as coverImage,
        a.view_count as viewCount,
        a.like_count as likeCount,
        a.create_time as createTime,
        u.id as 'author.id',
        u.username as 'author.username',
        u.avatar as 'author.avatar',
        c.name as categoryName,
        COALESCE(comment_stats.comment_count, 0) as commentCount,
        COALESCE(tag_stats.tag_count, 0) as tagCount,
        GROUP_CONCAT(t.name) as tagNames
        FROM article a
        LEFT JOIN user u ON a.user_id = u.id
        LEFT JOIN category c ON a.category_id = c.id
        LEFT JOIN article_tag at ON a.id = at.article_id AND at.deleted = 0
        LEFT JOIN tag t ON at.tag_id = t.id AND t.deleted = 0
        LEFT JOIN (
        SELECT article_id, COUNT(*) as comment_count
        FROM comment
        WHERE deleted = 0 AND create_time >= #{startTime}
        GROUP BY article_id
        ) comment_stats ON a.id = comment_stats.article_id
        LEFT JOIN (
        SELECT article_id, COUNT(*) as tag_count
        FROM article_tag
        WHERE deleted = 0
        GROUP BY article_id
        ) tag_stats ON a.id = tag_stats.article_id
        WHERE a.deleted = 0
        AND a.status = 1
        AND a.create_time >= #{startTime}
        AND u.status = 0
        GROUP BY a.id, a.title, a.cover_image, a.view_count, a.like_count,
        a.create_time, u.id, u.username, u.avatar, c.name,
        comment_stats.comment_count, tag_stats.tag_count
        <choose>
            <when test="type.name() == 'HOT'">
                ORDER BY a.view_count DESC
            </when>
            <when test="type.name() == 'LIKED'">
                ORDER BY a.like_count DESC
            </when>
            <when test="type.name() == 'COMMENTED'">
                ORDER BY comment_stats.comment_count DESC
            </when>
            <when test="type.name() == 'TAGGED'">
                ORDER BY tag_stats.tag_count DESC
            </when>
        </choose>
        LIMIT #{limit}
    </select>

</mapper>
